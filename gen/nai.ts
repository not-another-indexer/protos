// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "nai.proto" (package "nai", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message nai.CreateGalleryRequest
 */
export interface CreateGalleryRequest {
    /**
     * @generated from protobuf field: string p_gallery_name = 1;
     */
    pGalleryName: string;
}
/**
 * @generated from protobuf message nai.CreateGalleryResponse
 */
export interface CreateGalleryResponse {
    /**
     * @generated from protobuf field: string p_gallery_uuid = 1;
     */
    pGalleryUuid: string;
}
/**
 * @generated from protobuf message nai.GalleryPreview
 */
export interface GalleryPreview {
    /**
     * @generated from protobuf field: string p_gallery_uuid = 1;
     */
    pGalleryUuid: string;
    /**
     * @generated from protobuf field: string p_gallery_name = 2;
     */
    pGalleryName: string;
    /**
     * @generated from protobuf field: repeated string p_preview = 3;
     */
    pPreview: string[]; // only 4 image
}
/**
 * @generated from protobuf message nai.GetGalleriesRequest
 */
export interface GetGalleriesRequest {
}
/**
 * @generated from protobuf message nai.GetGalleriesResponse
 */
export interface GetGalleriesResponse {
    /**
     * @generated from protobuf field: repeated nai.GalleryPreview p_content = 1;
     */
    pContent: GalleryPreview[];
}
/**
 * @generated from protobuf message nai.DeleteGalleryRequest
 */
export interface DeleteGalleryRequest {
    /**
     * @generated from protobuf field: string p_gallery_uuid = 1;
     */
    pGalleryUuid: string;
}
/**
 * @generated from protobuf message nai.GetGalleryImagesRequest
 */
export interface GetGalleryImagesRequest {
    /**
     * @generated from protobuf field: string p_gallery_uuid = 1;
     */
    pGalleryUuid: string;
    /**
     * @generated from protobuf field: int32 p_size = 2;
     */
    pSize: number;
    /**
     * @generated from protobuf field: int32 p_offset = 3;
     */
    pOffset: number;
}
/**
 * @generated from protobuf message nai.Image
 */
export interface Image {
    /**
     * @generated from protobuf field: string p_image_id = 1;
     */
    pImageId: string;
    /**
     * @generated from protobuf field: string p_gallery_uuid = 2;
     */
    pGalleryUuid: string;
    /**
     * @generated from protobuf field: string p_description = 3;
     */
    pDescription: string;
}
/**
 * @generated from protobuf message nai.GetGalleryImagesResponse
 */
export interface GetGalleryImagesResponse {
    /**
     * @generated from protobuf field: repeated nai.Image p_content = 1;
     */
    pContent: Image[];
    /**
     * @generated from protobuf field: int64 p_total = 2;
     */
    pTotal: bigint;
}
/**
 * @generated from protobuf message nai.ContentMetadata
 */
export interface ContentMetadata {
    /**
     * @generated from protobuf field: string p_gallery_uuid = 1;
     */
    pGalleryUuid: string;
    /**
     * @generated from protobuf field: string p_description = 2;
     */
    pDescription: string;
    /**
     * @generated from protobuf field: string p_extension = 3;
     */
    pExtension: string;
}
/**
 * @generated from protobuf message nai.AddImageRequest
 */
export interface AddImageRequest {
    /**
     * @generated from protobuf field: nai.ContentMetadata p_metadata = 1;
     */
    pMetadata?: ContentMetadata;
    /**
     * @generated from protobuf field: bytes p_chunk_data = 2;
     */
    pChunkData: Uint8Array;
}
/**
 * @generated from protobuf message nai.AddImageResponse
 */
export interface AddImageResponse {
    /**
     * @generated from protobuf field: string p_image_uuid = 1;
     */
    pImageUuid: string;
}
/**
 * @generated from protobuf message nai.DeleteImageRequest
 */
export interface DeleteImageRequest {
    /**
     * @generated from protobuf field: string p_image_uuid = 1;
     */
    pImageUuid: string;
}
/**
 * @generated from protobuf message nai.GetImageContentRequest
 */
export interface GetImageContentRequest {
    /**
     * @generated from protobuf field: string p_image_uuid = 1;
     */
    pImageUuid: string;
}
/**
 * @generated from protobuf message nai.GetImageContentResponse
 */
export interface GetImageContentResponse {
    /**
     * @generated from protobuf field: bytes p_chunk_data = 1;
     */
    pChunkData: Uint8Array;
}
/**
 * @generated from protobuf message nai.SearchImagesRequest
 */
export interface SearchImagesRequest {
    /**
     * @generated from protobuf field: string p_query = 1;
     */
    pQuery: string;
    /**
     * @generated from protobuf field: string p_gallery_uuid = 2;
     */
    pGalleryUuid: string;
    /**
     * @generated from protobuf field: map<string, double> p_parameters = 3;
     */
    pParameters: {
        [key: string]: number;
    };
    /**
     * @generated from protobuf field: int64 p_count = 4;
     */
    pCount: bigint;
}
/**
 * @generated from protobuf message nai.MetricImage
 */
export interface MetricImage {
    /**
     * @generated from protobuf field: nai.Image p_image = 1;
     */
    pImage?: Image;
    /**
     * @generated from protobuf field: map<string, double> p_metrics = 2;
     */
    pMetrics: {
        [key: string]: number;
    };
}
/**
 * @generated from protobuf message nai.SearchImagesResponse
 */
export interface SearchImagesResponse {
    /**
     * @generated from protobuf field: repeated nai.MetricImage p_content = 1;
     */
    pContent: MetricImage[];
}
/**
 * @generated from protobuf message nai.Empty
 */
export interface Empty {
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateGalleryRequest$Type extends MessageType<CreateGalleryRequest> {
    constructor() {
        super("nai.CreateGalleryRequest", [
            { no: 1, name: "p_gallery_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateGalleryRequest>): CreateGalleryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pGalleryName = "";
        if (value !== undefined)
            reflectionMergePartial<CreateGalleryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGalleryRequest): CreateGalleryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string p_gallery_name */ 1:
                    message.pGalleryName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGalleryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string p_gallery_name = 1; */
        if (message.pGalleryName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pGalleryName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.CreateGalleryRequest
 */
export const CreateGalleryRequest = new CreateGalleryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGalleryResponse$Type extends MessageType<CreateGalleryResponse> {
    constructor() {
        super("nai.CreateGalleryResponse", [
            { no: 1, name: "p_gallery_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateGalleryResponse>): CreateGalleryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pGalleryUuid = "";
        if (value !== undefined)
            reflectionMergePartial<CreateGalleryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGalleryResponse): CreateGalleryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string p_gallery_uuid */ 1:
                    message.pGalleryUuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGalleryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string p_gallery_uuid = 1; */
        if (message.pGalleryUuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pGalleryUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.CreateGalleryResponse
 */
export const CreateGalleryResponse = new CreateGalleryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryPreview$Type extends MessageType<GalleryPreview> {
    constructor() {
        super("nai.GalleryPreview", [
            { no: 1, name: "p_gallery_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "p_gallery_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "p_preview", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryPreview>): GalleryPreview {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pGalleryUuid = "";
        message.pGalleryName = "";
        message.pPreview = [];
        if (value !== undefined)
            reflectionMergePartial<GalleryPreview>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryPreview): GalleryPreview {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string p_gallery_uuid */ 1:
                    message.pGalleryUuid = reader.string();
                    break;
                case /* string p_gallery_name */ 2:
                    message.pGalleryName = reader.string();
                    break;
                case /* repeated string p_preview */ 3:
                    message.pPreview.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryPreview, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string p_gallery_uuid = 1; */
        if (message.pGalleryUuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pGalleryUuid);
        /* string p_gallery_name = 2; */
        if (message.pGalleryName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pGalleryName);
        /* repeated string p_preview = 3; */
        for (let i = 0; i < message.pPreview.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.pPreview[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.GalleryPreview
 */
export const GalleryPreview = new GalleryPreview$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGalleriesRequest$Type extends MessageType<GetGalleriesRequest> {
    constructor() {
        super("nai.GetGalleriesRequest", []);
    }
    create(value?: PartialMessage<GetGalleriesRequest>): GetGalleriesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetGalleriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGalleriesRequest): GetGalleriesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetGalleriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.GetGalleriesRequest
 */
export const GetGalleriesRequest = new GetGalleriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGalleriesResponse$Type extends MessageType<GetGalleriesResponse> {
    constructor() {
        super("nai.GetGalleriesResponse", [
            { no: 1, name: "p_content", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GalleryPreview }
        ]);
    }
    create(value?: PartialMessage<GetGalleriesResponse>): GetGalleriesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pContent = [];
        if (value !== undefined)
            reflectionMergePartial<GetGalleriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGalleriesResponse): GetGalleriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated nai.GalleryPreview p_content */ 1:
                    message.pContent.push(GalleryPreview.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGalleriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated nai.GalleryPreview p_content = 1; */
        for (let i = 0; i < message.pContent.length; i++)
            GalleryPreview.internalBinaryWrite(message.pContent[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.GetGalleriesResponse
 */
export const GetGalleriesResponse = new GetGalleriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGalleryRequest$Type extends MessageType<DeleteGalleryRequest> {
    constructor() {
        super("nai.DeleteGalleryRequest", [
            { no: 1, name: "p_gallery_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteGalleryRequest>): DeleteGalleryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pGalleryUuid = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteGalleryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteGalleryRequest): DeleteGalleryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string p_gallery_uuid */ 1:
                    message.pGalleryUuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteGalleryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string p_gallery_uuid = 1; */
        if (message.pGalleryUuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pGalleryUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.DeleteGalleryRequest
 */
export const DeleteGalleryRequest = new DeleteGalleryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGalleryImagesRequest$Type extends MessageType<GetGalleryImagesRequest> {
    constructor() {
        super("nai.GetGalleryImagesRequest", [
            { no: 1, name: "p_gallery_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "p_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "p_offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetGalleryImagesRequest>): GetGalleryImagesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pGalleryUuid = "";
        message.pSize = 0;
        message.pOffset = 0;
        if (value !== undefined)
            reflectionMergePartial<GetGalleryImagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGalleryImagesRequest): GetGalleryImagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string p_gallery_uuid */ 1:
                    message.pGalleryUuid = reader.string();
                    break;
                case /* int32 p_size */ 2:
                    message.pSize = reader.int32();
                    break;
                case /* int32 p_offset */ 3:
                    message.pOffset = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGalleryImagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string p_gallery_uuid = 1; */
        if (message.pGalleryUuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pGalleryUuid);
        /* int32 p_size = 2; */
        if (message.pSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.pSize);
        /* int32 p_offset = 3; */
        if (message.pOffset !== 0)
            writer.tag(3, WireType.Varint).int32(message.pOffset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.GetGalleryImagesRequest
 */
export const GetGalleryImagesRequest = new GetGalleryImagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Image$Type extends MessageType<Image> {
    constructor() {
        super("nai.Image", [
            { no: 1, name: "p_image_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "p_gallery_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "p_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Image>): Image {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pImageId = "";
        message.pGalleryUuid = "";
        message.pDescription = "";
        if (value !== undefined)
            reflectionMergePartial<Image>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Image): Image {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string p_image_id */ 1:
                    message.pImageId = reader.string();
                    break;
                case /* string p_gallery_uuid */ 2:
                    message.pGalleryUuid = reader.string();
                    break;
                case /* string p_description */ 3:
                    message.pDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Image, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string p_image_id = 1; */
        if (message.pImageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pImageId);
        /* string p_gallery_uuid = 2; */
        if (message.pGalleryUuid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pGalleryUuid);
        /* string p_description = 3; */
        if (message.pDescription !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.Image
 */
export const Image = new Image$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGalleryImagesResponse$Type extends MessageType<GetGalleryImagesResponse> {
    constructor() {
        super("nai.GetGalleryImagesResponse", [
            { no: 1, name: "p_content", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 2, name: "p_total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetGalleryImagesResponse>): GetGalleryImagesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pContent = [];
        message.pTotal = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetGalleryImagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGalleryImagesResponse): GetGalleryImagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated nai.Image p_content */ 1:
                    message.pContent.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 p_total */ 2:
                    message.pTotal = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGalleryImagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated nai.Image p_content = 1; */
        for (let i = 0; i < message.pContent.length; i++)
            Image.internalBinaryWrite(message.pContent[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 p_total = 2; */
        if (message.pTotal !== 0n)
            writer.tag(2, WireType.Varint).int64(message.pTotal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.GetGalleryImagesResponse
 */
export const GetGalleryImagesResponse = new GetGalleryImagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContentMetadata$Type extends MessageType<ContentMetadata> {
    constructor() {
        super("nai.ContentMetadata", [
            { no: 1, name: "p_gallery_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "p_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "p_extension", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContentMetadata>): ContentMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pGalleryUuid = "";
        message.pDescription = "";
        message.pExtension = "";
        if (value !== undefined)
            reflectionMergePartial<ContentMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContentMetadata): ContentMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string p_gallery_uuid */ 1:
                    message.pGalleryUuid = reader.string();
                    break;
                case /* string p_description */ 2:
                    message.pDescription = reader.string();
                    break;
                case /* string p_extension */ 3:
                    message.pExtension = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContentMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string p_gallery_uuid = 1; */
        if (message.pGalleryUuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pGalleryUuid);
        /* string p_description = 2; */
        if (message.pDescription !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pDescription);
        /* string p_extension = 3; */
        if (message.pExtension !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pExtension);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.ContentMetadata
 */
export const ContentMetadata = new ContentMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddImageRequest$Type extends MessageType<AddImageRequest> {
    constructor() {
        super("nai.AddImageRequest", [
            { no: 1, name: "p_metadata", kind: "message", T: () => ContentMetadata },
            { no: 2, name: "p_chunk_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<AddImageRequest>): AddImageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pChunkData = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<AddImageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddImageRequest): AddImageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* nai.ContentMetadata p_metadata */ 1:
                    message.pMetadata = ContentMetadata.internalBinaryRead(reader, reader.uint32(), options, message.pMetadata);
                    break;
                case /* bytes p_chunk_data */ 2:
                    message.pChunkData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddImageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* nai.ContentMetadata p_metadata = 1; */
        if (message.pMetadata)
            ContentMetadata.internalBinaryWrite(message.pMetadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes p_chunk_data = 2; */
        if (message.pChunkData.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.pChunkData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.AddImageRequest
 */
export const AddImageRequest = new AddImageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddImageResponse$Type extends MessageType<AddImageResponse> {
    constructor() {
        super("nai.AddImageResponse", [
            { no: 1, name: "p_image_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddImageResponse>): AddImageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pImageUuid = "";
        if (value !== undefined)
            reflectionMergePartial<AddImageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddImageResponse): AddImageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string p_image_uuid */ 1:
                    message.pImageUuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddImageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string p_image_uuid = 1; */
        if (message.pImageUuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pImageUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.AddImageResponse
 */
export const AddImageResponse = new AddImageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteImageRequest$Type extends MessageType<DeleteImageRequest> {
    constructor() {
        super("nai.DeleteImageRequest", [
            { no: 1, name: "p_image_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteImageRequest>): DeleteImageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pImageUuid = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteImageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteImageRequest): DeleteImageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string p_image_uuid */ 1:
                    message.pImageUuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteImageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string p_image_uuid = 1; */
        if (message.pImageUuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pImageUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.DeleteImageRequest
 */
export const DeleteImageRequest = new DeleteImageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetImageContentRequest$Type extends MessageType<GetImageContentRequest> {
    constructor() {
        super("nai.GetImageContentRequest", [
            { no: 1, name: "p_image_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetImageContentRequest>): GetImageContentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pImageUuid = "";
        if (value !== undefined)
            reflectionMergePartial<GetImageContentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetImageContentRequest): GetImageContentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string p_image_uuid */ 1:
                    message.pImageUuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetImageContentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string p_image_uuid = 1; */
        if (message.pImageUuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pImageUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.GetImageContentRequest
 */
export const GetImageContentRequest = new GetImageContentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetImageContentResponse$Type extends MessageType<GetImageContentResponse> {
    constructor() {
        super("nai.GetImageContentResponse", [
            { no: 1, name: "p_chunk_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetImageContentResponse>): GetImageContentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pChunkData = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<GetImageContentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetImageContentResponse): GetImageContentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes p_chunk_data */ 1:
                    message.pChunkData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetImageContentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes p_chunk_data = 1; */
        if (message.pChunkData.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.pChunkData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.GetImageContentResponse
 */
export const GetImageContentResponse = new GetImageContentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchImagesRequest$Type extends MessageType<SearchImagesRequest> {
    constructor() {
        super("nai.SearchImagesRequest", [
            { no: 1, name: "p_query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "p_gallery_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "p_parameters", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ } },
            { no: 4, name: "p_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SearchImagesRequest>): SearchImagesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pQuery = "";
        message.pGalleryUuid = "";
        message.pParameters = {};
        message.pCount = 0n;
        if (value !== undefined)
            reflectionMergePartial<SearchImagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchImagesRequest): SearchImagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string p_query */ 1:
                    message.pQuery = reader.string();
                    break;
                case /* string p_gallery_uuid */ 2:
                    message.pGalleryUuid = reader.string();
                    break;
                case /* map<string, double> p_parameters */ 3:
                    this.binaryReadMap3(message.pParameters, reader, options);
                    break;
                case /* int64 p_count */ 4:
                    message.pCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: SearchImagesRequest["pParameters"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SearchImagesRequest["pParameters"] | undefined, val: SearchImagesRequest["pParameters"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.double();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field nai.SearchImagesRequest.p_parameters");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: SearchImagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string p_query = 1; */
        if (message.pQuery !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pQuery);
        /* string p_gallery_uuid = 2; */
        if (message.pGalleryUuid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pGalleryUuid);
        /* map<string, double> p_parameters = 3; */
        for (let k of globalThis.Object.keys(message.pParameters))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Bit64).double(message.pParameters[k]).join();
        /* int64 p_count = 4; */
        if (message.pCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.pCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.SearchImagesRequest
 */
export const SearchImagesRequest = new SearchImagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetricImage$Type extends MessageType<MetricImage> {
    constructor() {
        super("nai.MetricImage", [
            { no: 1, name: "p_image", kind: "message", T: () => Image },
            { no: 2, name: "p_metrics", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ } }
        ]);
    }
    create(value?: PartialMessage<MetricImage>): MetricImage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pMetrics = {};
        if (value !== undefined)
            reflectionMergePartial<MetricImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetricImage): MetricImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* nai.Image p_image */ 1:
                    message.pImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.pImage);
                    break;
                case /* map<string, double> p_metrics */ 2:
                    this.binaryReadMap2(message.pMetrics, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: MetricImage["pMetrics"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MetricImage["pMetrics"] | undefined, val: MetricImage["pMetrics"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.double();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field nai.MetricImage.p_metrics");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: MetricImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* nai.Image p_image = 1; */
        if (message.pImage)
            Image.internalBinaryWrite(message.pImage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, double> p_metrics = 2; */
        for (let k of globalThis.Object.keys(message.pMetrics))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Bit64).double(message.pMetrics[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.MetricImage
 */
export const MetricImage = new MetricImage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchImagesResponse$Type extends MessageType<SearchImagesResponse> {
    constructor() {
        super("nai.SearchImagesResponse", [
            { no: 1, name: "p_content", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MetricImage }
        ]);
    }
    create(value?: PartialMessage<SearchImagesResponse>): SearchImagesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pContent = [];
        if (value !== undefined)
            reflectionMergePartial<SearchImagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchImagesResponse): SearchImagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated nai.MetricImage p_content */ 1:
                    message.pContent.push(MetricImage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchImagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated nai.MetricImage p_content = 1; */
        for (let i = 0; i < message.pContent.length; i++)
            MetricImage.internalBinaryWrite(message.pContent[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.SearchImagesResponse
 */
export const SearchImagesResponse = new SearchImagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("nai.Empty", []);
    }
    create(value?: PartialMessage<Empty>): Empty {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Empty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Empty): Empty {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message nai.Empty
 */
export const Empty = new Empty$Type();
/**
 * @generated ServiceType for protobuf service nai.MainService
 */
export const MainService = new ServiceType("nai.MainService", [
    { name: "CreateGallery", options: {}, I: CreateGalleryRequest, O: CreateGalleryResponse },
    { name: "GetGalleries", options: {}, I: GetGalleriesRequest, O: GetGalleriesResponse },
    { name: "DeleteGallery", options: {}, I: DeleteGalleryRequest, O: Empty }
]);
/**
 * @generated ServiceType for protobuf service nai.GalleryService
 */
export const GalleryService = new ServiceType("nai.GalleryService", [
    { name: "GetGalleryImages", options: {}, I: GetGalleryImagesRequest, O: GetGalleryImagesResponse },
    { name: "AddImage", options: {}, I: AddImageRequest, O: AddImageResponse },
    { name: "DeleteImage", options: {}, I: DeleteImageRequest, O: Empty },
    { name: "GetImageContent", options: {}, I: GetImageContentRequest, O: GetImageContentResponse },
    { name: "SearchImages", options: {}, I: SearchImagesRequest, O: SearchImagesResponse }
]);
